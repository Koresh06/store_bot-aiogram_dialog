from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
# from aiogram_dialog import DialogManager, StartMode

from app.core.repo.requests import RequestsRepo
from app.tgbot.fsm.state import Feetback, RegisterUser
from app.tgbot.handlers.users.inline_kb import *
from app.tgbot.handlers.users.filter_kb import *
from app.config_loader import settings

# from app.tgbot.dialogs.user.state import Catalog


user_router = Router()


@user_router.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(
        text='–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —Ñ–æ—Ä–º—É, –ø–æ—ç—Ç–æ–º—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π!'
    )

@user_router.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è!'
    )
    await state.clear()


@user_router.message(CommandStart())
async def cmd_start(message: Message, repo: RequestsRepo, state: FSMContext) -> None:
    user = await repo.users.check_user(message.from_user.id)

    if user:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:')
        await state.set_state(RegisterUser.phone)
    else:
        await message.answer('–ú–∞–≥–∞–∑–∏–Ω –±–æ—Ç –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é —Ç–æ—Ä—Ç–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑, –≤—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–∏ÃÜ /help', reply_markup=await menu())
        

@user_router.message(RegisterUser.phone)
async def register_phone(message: Message, repo: RequestsRepo, state: FSMContext) -> None:
    await repo.users.add_user(message.from_user.id, message.from_user.username, message.text)
    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=await menu())
    await message.bot.send_message(chat_id=settings.bot.admin_id, text=f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {message.from_user.first_name}', reply_markup=await new_user(message.from_user.id, message.from_user.first_name))
    await state.clear()
    await repo.session.commit()


@user_router.callback_query(F.data == 'menu')
async def cmd_main(callback: CallbackQuery):
    await callback.message.edit_text('–ú–∞–≥–∞–∑–∏–Ω –±–æ—Ç –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é —Ç–æ—Ä—Ç–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑, –≤—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–∏ÃÜ /help', reply_markup=await menu())


@user_router.callback_query(F.data == 'category')
async def cmd_menu(callback: CallbackQuery, repo: RequestsRepo) -> None:
    await callback.message.delete()
    name_categories = await repo.users.get_categories_name()
    await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=await categories_menu(name_categories))


@user_router.callback_query(F.data == 'profile')
async def user_profile(callback: CallbackQuery, repo: RequestsRepo):
    user = await repo.users.show_phone(callback.from_user.id)
    count = await repo.users.get_orders_count_user(callback.from_user.id)
    await callback.message.edit_text(f'‚îåüì∞ –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å\n‚îú–ò–º—è: <code>{callback.from_user.first_name}</code>\n‚îúID: <code>{callback.from_user.id}</code>\n‚îú–¢–µ–ª–µ—Ñ–æ–Ω: <code>{user.phone}</code>\n‚îî–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <code>{count} —à—Ç.</code>', reply_markup=back_menu)
    await repo.session.commit()


@user_router.callback_query(F.data == "feedback")
async def process_feedback(callback: CallbackQuery):
    await callback.message.edit_text("–û—Ç–∑—ã–≤—ã —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–Ω–∞–ª–µüîΩ", reply_markup=await feedback_kb())


@user_router.callback_query(F.data == "feedback_user")
async def start_state_feedback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. \n\n–í–ê–ñ–ù–û!!! –æ—Ç–∑—ã–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º:\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel")
    await state.set_state(Feetback.text)
    await callback.answer()


@user_router.message(StateFilter(Feetback.text))
async def cmd_register_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer(text=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤\n\n<i>{message.text}</i>", reply_markup=await confirm_feetback(message.from_user.id, message.message_id))
    await state.set_state(Feetback.confirm)


@user_router.callback_query(ConfirFeetback.filter(), StateFilter(Feetback.confirm))
async def cmd_confirm(callback: CallbackQuery, state: FSMContext, bot: Bot, callback_data: ConfirFeetback):
    confirm = callback_data.action
    tg_id = callback_data.tg_id
    message_id = callback_data.message_id
    data = await state.get_data()
    await callback.message.delete()
    if confirm == 1:
        await bot.send_message(chat_id=tg_id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", reply_markup=await menu())
        await bot.send_message(chat_id=settings.bot.admin_id, text=f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {callback.from_user.first_name}:\n\n{data['text']}", reply_markup=await admin_confirm_feetback(tg_id, message_id))
    else:
        await callback.message.answer("–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω!", reply_markup=await menu())
    await state.clear()
    await callback.answer()


@user_router.message(Command(commands='help'))
async def cmd_help(message: Message):
    await message.delete()
    await message.answer('üî∏–£ –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?\n–ú—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—Ç–∏–º!\n', reply_markup=kb_help)