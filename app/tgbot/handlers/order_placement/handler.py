import datetime
from aiogram import F, Router ,Bot
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from app.config_loader import settings
from app.core.repo.requests import RequestsRepo
from app.tgbot.fsm.state import OrderPlacement
from .inline_kb import *
from .filter_kb import *


order_placement = Router()


@order_placement.callback_query(F.data == "order")
async def cmt_order_placement_user(callback: CallbackQuery, state: FSMContext):
    now = datetime.datetime.now()
    current_year = now.year
    current_month = now.month
    current_date = now.date()
    await callback.message.edit_text('üóì –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–æ—Ä—Ç', reply_markup=await generate_calendar_markup(current_year, current_month, current_date))
    await state.set_state(OrderPlacement.date)


@order_placement.callback_query(CalendarCbData.filter())
async def process_calendar_callback(callback: CallbackQuery, callback_data: CalendarCbData):
    year, month = callback_data.year, callback_data.month
    if 0 < int(month) < 13:
        current_date = datetime.datetime.now().date()
        markup = await generate_calendar_markup(int(year), int(month), current_date)

        await callback.bot.edit_message_reply_markup(chat_id=callback.message.chat.id,
                                        message_id=callback.message.message_id,
                                        reply_markup=markup)
    else:
        await callback.answer('–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞!')


@order_placement.callback_query(DayCalendarCbData.filter(), StateFilter(OrderPlacement.date))
async def process_day_callback(callback: CallbackQuery, callback_data: DayCalendarCbData, state: FSMContext):
    if not "üîí" in callback_data.day and callback_data.day != " ":
        print(callback_data)
        year, month, day = callback_data.year, callback_data.month, callback_data.day
        selected_date = f"{day}.{month}.{year}"
        await state.update_data(date=selected_date)
        await callback.answer(f'–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {selected_date}. –°–ø–∞—Å–∏–±–æ!', show_alert=True)
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=await method_paymant())
        await state.set_state(OrderPlacement.method)
    else:
        await callback.answer('–î–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å')


@order_placement.callback_query(MethodPaymantCbData.filter(), StateFilter(OrderPlacement.method))
async def process_method_callback(callback: CallbackQuery, callback_data: MethodPaymantCbData, state: FSMContext, repo: RequestsRepo, bot: Bot):
    await state.update_data(method=callback_data.method)
    if callback_data.method == "card":
        await callback.answer(f'–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–∏ÃÜ. –ù–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!')
    else:
        data = await state.get_data()
        products = await repo.order_payment.get_products_in_cart(tg_id=callback.from_user.id)
        price_order = sum([value["price"] * value["quantity"] for key, value in products.items()])
        order_id = await repo.order_payment.create_order(tg_id=callback.from_user.id, data=data, products=products, price_order=price_order)
        content = "\n".join([f'{value["description"]}: {value["quantity"]} —à—Ç.' for _, value in products.items()])
        if order_id:
            await repo.session.commit()
            await callback.message.delete()
            await bot.send_message(chat_id=settings.bot.admin_id, text=f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç {callback.from_user.first_name}\n\n–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {data["date"]}\n\n–ü–æ–∑–∏—Ü–∏–∏: {content}\n\nüí∏ –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {price_order} RUB\n\n‚ôªÔ∏è –°–¢–ê–¢–£–° –û–ü–õ–ê–¢–´: ‚ùå', reply_markup=await ordering_solution(id=order_id, tg_id=callback.from_user.id))
            await callback.message.answer("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start")
        else:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start")